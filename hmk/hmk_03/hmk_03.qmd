---
title: "Homework 3"
author: "Jake Perez"
format: gfm
editor: visual
---

# Data input/output

The `tidyverse` package can be used to read a csv file to perform data analysis within R. The code below reads a data file (`iron_raw_data.csv`) that contains some data related to analysis of iron content in sediment layers of a lake system.

```{r, message = FALSE}
library(tidyverse)
```

```{r}
my_data <- read_csv('iron_raw_data.csv')
```

# Investigating the properties of data frames

We can look at the properties of the data frame object that was created by using various functions. Below are examples of using `str()` and `summary()`. The `str()` function specifies the dimensions of the data frame, the different column vectors with headers, and the data type of each column.

```{r}
str(my_data)
```

The `summary()` function gives statistical information for the different column vectors. For the numeric columns, it provides statistical data like mean and median values. Character columns return the number of values.

```{r}
summary(my_data)
```

While statistical data is valuable for numeric data, the `str()` function is more valuable because it verifies what values were read from the csv file into the data frame object while the `summary()` function does not provide enough information to check that your file reading was effective.

# Manipulating data frames

We can create a new column in the data frame by using `cbind()`. Here we created a new vector that is an arithmetic manipulation of another column. This example shows a scaling of the depth of the core data that is an estimation of the true depth of the layers within the lake sediments.

```{r}
depth <- my_data$depth
scaled_depth <- 2.43142*(depth - 2.6) + 17
my_data <- cbind(my_data, scaled_depth)
print(my_data)
```

# Working on columns

We can perform specific operations on an individual column of a data frame by calling the data frame object and using `$` with the name of the column.

```{r}
mean(my_data$sample_mass)
```

# Accessing elements of data frames

Let's use this `cats` data frame example to explore different notations that can be used to access different elements of a data frame.

```{r}
cats <- data.frame(coat = c("calico", "black", "tabby"),
                   weight = c(2.1, 5.0, 3.2),
                   likes_string = c(1, 0, 1))
```

```{r}
cats[1]
typeof(cats[1])
```

`cats[1]` returns a list that is consists of the values in the first column of the `cats` data frame.

```{r}
cats[[1]]
typeof(cats[[1]])
```

`cats[[1]]` returns the values of the first column in the `cats` data frame

```{r}
cats$coat
typeof(cats$coat)
```

`cats$coat` returns the values in the column that has the header `coat` (in this case, it is also the first column).

```{r}
cats[1, 1]
typeof(cats[1, 1])
```

`cats[1, 1]` returns the first value of the first column in the `cats` data frame.

```{r}
cats[ ,1]
typeof(cats[ ,1])
```

`cats[ ,1]` returns the values of the first column of the `cats` data frame.

```{r}
cats[1, ]
typeof(cats[1, ])
```

`cats[1, ]` returns a list object that is the first row of the `cats` data frame.

# Optional challenge

Prompt:

"A data frame is an example of a list. I haven't discussed how to access elements of lists, but it is covered [here](https://swcarpentry.github.io/r-novice-gapminder/04-data-structures-part1/index.html#lists)).

Explain in what ways accessing elements of lists are like accessing columns of data frames, and given that, how it shows that data frames are a type of list."

Lists are a data type that can be an assembly of different data types. You can have a list with elements that are numeric, characters, logical, or complex. Lists can even include vectors of those data types. You can access specific elements of that list by calling the specific index of it (e.g. `list[[1]]`, `list[[2]]`) or by calling the value the data type was assigned to.

For example, the list used in the link above:

```{r}
another_list <- list(title = "Numbers", numbers = 1:10, data = TRUE)
another_list
```

You can call the different elements by using the `$` notation:

```{r}
another_list$title
another_list$numbers
```

These commands to access different elements are the same as accessing elements in a data frame. A data frame is a specific type of list. A data frame is a list of vectors that have to be of the same length.
